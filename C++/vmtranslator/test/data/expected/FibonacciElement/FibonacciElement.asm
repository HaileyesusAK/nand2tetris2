	@261
	D=A
	@SP
	M=D
	@Sys.init
	0;JMP
// function Main.fibonacci 0
	(Main.fibonacci)
	@LCL
	D=M
	@i
	M=D
	@0
	D=D+A
	@n
	M=D
	(Main.fibonacci_SET_LCL)
	@n
	D=M
	@i
	D=M-D
	@Main.fibonacci_SET_LCL_END
	D;JGE
	@i
	A=M
	M=0
	@i
	M=M+1
	@SP
	M=M+1
	@Main.fibonacci_SET_LCL
	0;JMP
	(Main.fibonacci_SET_LCL_END)
// push argument 0
	@ARG
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
// push constant 2
	@2
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
// lt
	@SP
	AM=M-1
	D=M
	@SP
	A=M-1
	D=M-D
	M=-1
	@LT_END_4
	D;JLT
	@SP
	A=M-1
	M=0
	(LT_END_4)
// if-goto IF_TRUE
	@SP
	AM=M-1
	D=M
	@Main.fibonacci$IF_TRUE
	D;JNE
// goto IF_FALSE
	@Main.fibonacci$IF_FALSE
	0;JMP
(Main.fibonacci$IF_TRUE)
// push argument 0
	@ARG
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
// return
	@LCL
	D=M
	@frame
	M=D
	@5
	D=A
	@frame
	A=M-D
	D=M
	@ret
	M=D
	@SP
	A=M-1
	D=M
	@ARG
	A=M
	M=D
	@ARG
	D=M+1
	@SP
	M=D
	@frame
	AM=M-1
	D=M
	@THAT
	M=D
	@frame
	AM=M-1
	D=M
	@THIS
	M=D
	@frame
	AM=M-1
	D=M
	@ARG
	M=D
	@frame
	AM=M-1
	D=M
	@LCL
	M=D
	@ret
	A=M
	0;JMP
(Main.fibonacci$IF_FALSE)
// push argument 0
	@ARG
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
// push constant 2
	@2
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
// sub
	@SP
	AM=M-1
	D=M
	@SP
	A=M-1
	M=M-D
	// call Main.fibonacci 1
	@Main.fibonacci$end3
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@1
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
	(Main.fibonacci$end3)
// push argument 0
	@ARG
	D=M
	@0
	A=D+A
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
// push constant 1
	@1
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
// sub
	@SP
	AM=M-1
	D=M
	@SP
	A=M-1
	M=M-D
	// call Main.fibonacci 1
	@Main.fibonacci$end4
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@1
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
	(Main.fibonacci$end4)
// add
	@SP
	AM=M-1
	D=M
	@SP
	A=M-1
	M=M+D
// return
	@LCL
	D=M
	@frame
	M=D
	@5
	D=A
	@frame
	A=M-D
	D=M
	@ret
	M=D
	@SP
	A=M-1
	D=M
	@ARG
	A=M
	M=D
	@ARG
	D=M+1
	@SP
	M=D
	@frame
	AM=M-1
	D=M
	@THAT
	M=D
	@frame
	AM=M-1
	D=M
	@THIS
	M=D
	@frame
	AM=M-1
	D=M
	@ARG
	M=D
	@frame
	AM=M-1
	D=M
	@LCL
	M=D
	@ret
	A=M
	0;JMP
// function Sys.init 0
	(Sys.init)
	@LCL
	D=M
	@i
	M=D
	@0
	D=D+A
	@n
	M=D
	(Sys.init_SET_LCL)
	@n
	D=M
	@i
	D=M-D
	@Sys.init_SET_LCL_END
	D;JGE
	@i
	A=M
	M=0
	@i
	M=M+1
	@SP
	M=M+1
	@Sys.init_SET_LCL
	0;JMP
	(Sys.init_SET_LCL_END)
// push constant 4
	@4
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	// call Main.fibonacci 1
	@Main.fibonacci$end5
	D=A
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@LCL
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@ARG
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THIS
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@THAT
	D=M
	@SP
	A=M
	M=D
	@SP
	M=M+1
	@5
	D=A
	@1
	D=D+A
	@SP
	D=M-D
	@ARG
	M=D
	@SP
	D=M
	@LCL
	M=D
	@Main.fibonacci
	0;JMP
	(Main.fibonacci$end5)
(Sys.init$WHILE)
// goto WHILE
	@Sys.init$WHILE
	0;JMP
(END)
	@END
	0;JMP
